rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has a specific role
    function hasRole(role) {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user has any of the specified roles
    function hasAnyRole(roles) {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    // Helper function to check if user has a specific permission
    function hasPermission(permission) {
      return request.auth != null && 
        permission in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }
    
    // Helper function to check if user is active
    function isActiveUser() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.active == true;
    }

    // Users collection - profile data for admin system users
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if request.auth != null && 
        (request.auth.uid == userId || hasRole('admin'));
      
      // Only admins can create new users
      allow create: if request.auth != null && hasRole('admin') && 
        isActiveUser();
      
      // Users can update their own profile (limited fields), admins can update all
      allow update: if request.auth != null && isActiveUser() &&
        (request.auth.uid == userId && 
         // Users can only update certain fields about themselves
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['displayName', 'avatar', 'bio', 'expertise', 'social', 'lastLogin']) ||
         // Admins can update everything except sensitive system fields
         hasRole('admin'));
      
      // Only admins can delete users
      allow delete: if request.auth != null && hasRole('admin') && 
        isActiveUser();
    }
    
    // Posts collection - blog posts and articles
    match /posts/{postId} {
      // Published posts are public, draft/scheduled posts require authentication
      allow read: if resource.data.status == 'published' || 
        (request.auth != null && hasAnyRole(['admin', 'editor', 'author']) && isActiveUser());
      
      // Authors, editors, and admins can create posts
      allow create: if request.auth != null && 
        hasAnyRole(['admin', 'editor', 'author']) && 
        isActiveUser() && 
        request.resource.data.authorId == request.auth.uid;
      
      // Authors can update their own posts, editors and admins can update all
      allow update: if request.auth != null && isActiveUser() && 
        (hasAnyRole(['admin', 'editor']) || 
         (resource.data.authorId == request.auth.uid && hasRole('author')));
      
      // Only editors and admins can delete posts
      allow delete: if request.auth != null && 
        hasAnyRole(['admin', 'editor']) && 
        isActiveUser();
    }
    
    // Categories collection - content categorization
    match /categories/{categoryId} {
      // Categories are publicly readable
      allow read: if true;
      
      // Only editors and admins can manage categories
      allow create, update, delete: if request.auth != null && 
        hasAnyRole(['admin', 'editor']) && 
        isActiveUser();
    }
    
    // Media collection - uploaded files and images
    match /media/{mediaId} {
      // Media files are publicly readable (for displaying in posts)
      allow read: if true;
      
      // Authenticated users can upload media
      allow create: if request.auth != null && isActiveUser() &&
        request.resource.data.uploadedBy == request.auth.uid;
      
      // Users can update/delete their own media, editors and admins can manage all
      allow update, delete: if request.auth != null && isActiveUser() && 
        (hasAnyRole(['admin', 'editor']) || 
         resource.data.uploadedBy == request.auth.uid);
    }
    
    // Site configuration - global site settings
    match /site_config/{configId} {
      // Site config is publicly readable (for displaying site info)
      allow read: if true;
      
      // Only admins can update site configuration
      allow write: if request.auth != null && 
        hasRole('admin') && 
        isActiveUser();
    }
  }
}